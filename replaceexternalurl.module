<?php

/**
 * @External redirect url replacement on node view
 */

/**
 * Implements hook_node_presave()
 * Extract links from content and
 * add redirect entry when node adding and updating
 */
function replaceexternalurl_menu(){
 $items = array();

  $items['admin/settings/replaceexternalurl'] = array(
    'title' => 'Replace external url in content type',
    'description' => 'Enter minimum one content type',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('replaceexternalurl_admin'),
    'access arguments' => array('create new users'),
    'type' => MENU_NORMAL_ITEM,
   );

  return $items;
}

function replaceexternalurl_admin() {
  $form = array();

  $form['replaceexternalurl_type'] = array(
    '#type' => 'textfield',
    '#title' => t('Content type'),
    '#default_value' => variable_get('replaceexternalurl_type'),
    '#description' => 'Comma separated content type machine name',
    '#required' => TRUE,
  );

  return system_settings_form($form);
}
function replaceexternalurl_node_presave($node) {
  if ($node && in_array($node->type,explode(',',variable_get('replaceexternalurl_type')))) {
    // Get all links from node body field.
    $links = _replaceexternalurl_extract_links($node->body['und']['0']['value']);
    // Add redirect entry using redirect module function if url is external
    foreach ($links as $key => $url) {
      if (url_is_external($key) && valid_url($key,true)) {
        try{
          $redirect = new stdClass();
          redirect_object_prepare(
              $redirect,
              array(
                  'source' => drupal_hash_base64($key),
                  'source_options' => array(),
                  'redirect' => $key,
                  'redirect_options' => array(),
                  'language' => LANGUAGE_NONE,
              )
          );
          redirect_save($redirect);
        } catch (Exception $e){
          echo 'Caught exception: ',  $e->getMessage(), "\n";
        }
      }
    }
  }
}

/**
 *Extract links from node return link array
 */
function _replaceexternalurl_extract_links($text = '') {
  global $base_root, $is_https;
  $html_dom = filter_dom_load($text);
  $urls = array();
  // Finds all hyperlinks in the content.
  $links = $html_dom->getElementsByTagName('a');
  foreach ($links as $link) {
    $urls[] = $link->getAttribute('href');
  }
  // Remove empty values.
  $urls = array_filter($urls);
  // Remove duplicate urls.
  $urls = array_unique($urls);
  $links = array();
  foreach ($urls as $url) {
    // Decode HTML links into plain text links.
    // DOMDocument->loadHTML does not provide the RAW url from code. All html
    // entities are already decoded.
    // @todo: Try to find a way to get the raw value.
    $url_decoded = $url;
    // Prefix protocol relative urls with a protocol to allow link checking.
    if (preg_match('!^//!', $url_decoded)) {
      $http_protocol = $is_https ? 'https' : 'http';
      $url_decoded = $http_protocol . ':' . $url_decoded;
    }
    // FIXME: #1149596 HACK - Encode spaces in URLs, so validation equals TRUE and link gets added.
    $url_encoded = str_replace(' ', '%20', $url_decoded);
    // Full qualified URLs.
    if (valid_url($url_encoded, TRUE)) {
      // Add to Array and change HTML links into plain text links.
      $links[$url_decoded][] = $url;
    }
    // Skip mailto:, javascript:, etc.
    elseif (preg_match('/^\w[\w.+]*:/', $url_decoded)) {
      continue;
    }
  }
  return $links;
}

/**
 * Iterate links and replace redirect url in anchor tag
 */
function _replaceexternalurl_extract_links_replace($node) {
  $text = $node->content['body']['0']['#markup'];
  global  $base_url;
  $html_dom = filter_dom_load($text);
  // Finds all hyperlinks in the content.
  $links = $html_dom->getElementsByTagName('a');
  $redirectArray = array();
  $sourceArray = array();
  $mailid = '';
  foreach ($links as $key=>$link) {

    if (url_is_external($link->getAttribute('href')) && valid_url($link->getAttribute('href'),true)) {
      $redirectObj = redirect_load_by_source(drupal_hash_base64($link->getAttribute('href')));
      if($redirectObj)
      $text = str_replace("href=\"{$redirectObj->redirect}\"","href=\"{$base_url}/{$redirectObj->source}\"",$text);
    }
  }

 return $text;
}

/**
 * Implements hook_node_view()
 * Fetch links in content and replace redirect url
 */
function replaceexternalurl_node_view($node, $view_mode, $langcode) {
  if (in_array($node->type,explode(',',variable_get('replaceexternalurl_type'))) && $view_mode=='full') {
    //$node->content['body']['0']['#markup'];
    $node->content['body']['0']['#markup'] =  _replaceexternalurl_extract_links_replace($node);
  }
}
